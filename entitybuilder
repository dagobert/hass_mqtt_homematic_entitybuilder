#!/bin/bash
##
## Generates Home Assistant entities by using templates
##
##

# Path of the entitybuilder script
pathOfThisScript="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# Load configuration file if exist
if [ -e "${pathOfThisScript}/entitybuilder.conf" ]; then
  echo "Loading configuration file..."
  source "${pathOfThisScript}/entitybuilder.conf"
else
  echo "Configuration file not found: ${pathOfThisScript}/entitybuilder.conf"
  echo "Copy sample file and change it to your needs."
  exit 1
fi


# Templates directory
templatesSubDirectory="templates"

# Functions directory
functionsSubDirectory="functions"


# TODO: Add switch for Mqtt topics

overwriteCustomization="false"
hideEntityFromUI="none"
while getopts "x:m:n:c:p:CH:" opt; do
  case $opt in
    p)  habasepath=$OPTARG
	      ;;
    x)  mqttPrefix=$OPTARG
              ;;
    c)  channel=$OPTARG
              ;;
    m)  model=$OPTARG
	      ;;
    n)  name=$OPTARG
	      ;;
    C)  overwriteCustomization="true"
	      ;;
    H)  hideEntityFromUI=$OPTARG
				;;
    \?)
        echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
    :)
        echo "Option -$OPTARG requires an argument." >&2
        exit 1
        ;;
  esac
done


## Check for required options
[ "$habasepath" == "" ] && { echo "-p missing for Home Assistant configuration path"; exit 1; }
[ -d "$habasepath" ] || { echo "Home Assistant configuration path does not exist"; exit 1; }

[ "$mqttPrefix" == "" ] && { echo "-x missing for mqtt prefix"; exit 1; }
[ "$channel" == "" ] && { echo "-c missing for channel ID"; exit 1; }
[ "$model" == "" ] && { echo "-m missing for model"; exit 1; }
[ "$name" == "" ] && { echo "-n missing for name"; exit 1; }

if [[ "$hideEntityFromUI" != "none" && "$hideEntityFromUI" != "nonessential" && "$hideEntityFromUI" != "all" ]]; then
	echo "-H wrong parameter!. Only \"none\", \"nonessential\""
	exit 1
fi

templateDir="${pathOfThisScript}/${templatesSubDirectory}"
# Check existance of tempates directory
if [ ! -d "${templateDir}" ]; then
  echo "Templates directory does not exist: ${templateDir}"
  exit 1
fi

functionsDir="${pathOfThisScript}/${functionsSubDirectory}"
# Check existance of functions directory
if [ ! -d "${functionsDir}" ]; then
  echo "Functions directory does not exist: ${functionsDir}"
  exit 1
fi
for ff in ${functionsDir}/*; do

	echo "Loading functions ${ff}..."
	source "${ff}"
done


###################
## Functions here
###################

function func_generateEntity() {

	# entity type
	local l_entityTypeDir=${entityTypeSubdirectories[$l_entityType]}

	# Check existance of templates
	if [ ! -e "$templateDir/$l_template" ]; then
	  echo "Template file does not exist: $templateDir/$l_template"
		exit 1
	fi

  local l_entitySubLocation=${name//_/\/}
  [ $DEBUG > 0 ] && echo "entitysublocation for entities of the device: $l_entitySubLocation"

  ## copy templates and replace placeholders in templates
  local l_entityAbsLocation="$habasepath/${l_entityTypeDir}/${subdirForGenerated}/${l_entitySubLocation}${l_sensorSuffix}.yaml"
  local l_entityName="${name}${l_sensorSuffix}"
  local l_uniqueId="${name}${l_sensorSuffix}"

  mkdir -p -v ${l_entityAbsLocation%/*}
  cp -v $templateDir/${l_template} ${l_entityAbsLocation}
  sed -i "s/__ENTITYNAME__/$l_entityName/" ${l_entityAbsLocation}
  sed -i 's|__UNIQUEID__|'$l_uniqueId'|' ${l_entityAbsLocation}
  sed -i 's|__CHANNEL__|'${channel::-1}${l_deviceChannel}'|' ${l_entityAbsLocation}
  sed -i "s/__NAME__/$name/" ${l_entityAbsLocation}
  sed -i "s|__CCUMQTTTOPIC__|$mqttPrefix/${ccuMqttTopicPrefix}|" ${l_entityAbsLocation}
  sed -i "s|__HASSVIRTUALHMTOPIC__|${mqttPrefix}/${hassVirtualnmMqttTopicPrefix}|" ${l_entityAbsLocation}

	# Manage hide in UI
	local l_hidden="false"
	if [[ "$hideEntityFromUI" == "all" ]]; then
		l_hidden="true"
  elif [[ "$l_essentialforUIStatus" == "nonessential" && "$hideEntityFromUI" == "nonessential" ]]; then
		l_hidden="true"
	fi

#  ## Device specific customization
#  local l_customizationAbsLocation="$habasepath/customizations/entities/${subdirForGenerated}/${l_entitySubLocation}${l_sensorSuffix}.yaml"
#  local l_friendlyName=$(echo " $name"| sed -e 's/_/ /g' -e 's/[\^ ]./\U&/g' -e 's/^ //')
#  l_friendlyName="${l_friendlyName} ${l_friendlyNameSuffix}"
#
#  mkdir -p -v ${l_customizationAbsLocation%/*}
#  if [[ ! -e "$l_customizationAbsLocation" ||
#          $overwriteCustomization == "true" ]]; then
#    cat <<EOF >$l_customizationAbsLocation
#${l_entityType}.${l_entityName}:
#  friendly_name: ${l_friendlyName}
#  hidden: $l_hidden
#
#EOF
#  fi

}


function func_create_hmip_smi() {

	# Template for this entity
	local l_template="hmip_smi-motiondetector.yaml"

	# entity type
	local l_entityType="binary_sensor"

	# suffix for this entity used in "name" and "unique_id"
	local l_sensorSuffix="777motion"

	# suffix for friendly_name used for UI
	local l_friendlyNameSuffix=""

	# define if entity is essential or nonessential to show up in UI
	local l_essentialforUIStatus="essential"

	local l_deviceChannel=${channel#*:}
	func_generateEntity


  # general homematic sensors
	func_create_ghm_sabotage "essential"

	func_create_ghm_operatingvoltage "nonessential"
	func_create_ghm_lowbat "essential"

	func_create_ghm_configpending "nonessential"
	func_create_ghm_rssidevice "nonessential"
	func_create_ghm_rssipeer "nonessential"
	func_create_ghm_dutycycle "nonessential"
	func_create_ghm_unreach "nonessential"
	func_create_ghm_errorcode "nonessential"

}



###################
## Main program starts here
###################

case $model in
  hmip_bdt)     func_create_hmip_bdt
   				      ;;
  hmip_bsm)     func_create_hmip_bsm
  				      ;;
  hmip_froll)   func_create_hmip_froll
                                      ;;
  hmip_fsm)     func_create_hmip_fsm
  				      ;;
  hmip_pcbs)    func_create_hmip_pcbs
                                      ;;
  hmip_smi)     func_create_hmip_smi
  				      ;;
  hmip_swdoi)   func_create_hmip_swdoi
  				      ;;
  hmip_swsd)    func_create_hmip_swsd
                                      ;;
  hmip_wth2)    func_create_hmip_wth2
  				      ;;
  hmip_etrv2)   func_create_hmip_etrv2
  				      ;;
  hmip_heatinggroup)   func_create_hmip_heatinggroup
  				      ;;
  hm_lcsw1dr)   func_create_hm_lcsw1dr
                                      ;;
  hm_espmsw1dr)   func_create_hm_espmsw1dr
                                      ;;
  hb_unisentempds18b20)  func_create_hb_unisentempds18b20
                                      ;;
  \?)           echo "Invalid model! Supported models are"
	        echo "  hmip_bdt, hmip_swdoi"
                exit 1
                ;;
esac


